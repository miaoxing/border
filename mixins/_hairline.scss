/**
 * 方案1：缩小后再拉伸到原来大小
 *
 * 优点：支持所有边框
 * 缺点：overflow:hidden 可能挡住右边和下边边框，可需调整外边距或位置解决
 */
@mixin hairline($border-color: #ccc, $border-style: solid, $border-sides: "") {
  position: relative;
  border-width: 0 !important;
  border-color: $border-color;
  border-style: $border-style;

  &::after {
    // 去掉默认边框
    border-width: 0;

    // 按需指定边框
    @each $side in $border-sides {
      border-#{if($side == "", "", $side + "-")}width: 1PX;
    }

    position: absolute;
    content: " ";
    pointer-events: none;

    // 使用主元素的边框样式
    border-color: inherit;
    border-style: inherit;
    // NOTE: 圆角会缩放为 1/2
    border-radius: inherit;
    transform: scale(1);

    // 不处理 3 倍像素比
    // 测试发现 3 倍像素比时，线条出现粗细不一的情况
    @media (-webkit-min-device-pixel-ratio: 2) {
      // 先缩小到一半
      transform: scale(0.5);
      // 再拉伸到原来大小
      top: -50%;
      right: -50%;
      bottom: -50%;
      left: -50%;
    }
  }
}

@mixin hairline-top($border-color: #ccc, $border-style: solid) {
  @include hairline($border-color, $border-style, "top");
}

@mixin hairline-right($border-color: #ccc, $border-style: solid) {
  @include hairline($border-color, $border-style, "right");
}

@mixin hairline-bottom($border-color: #ccc, $border-style: solid) {
  @include hairline($border-color, $border-style, "bottom");
}

@mixin hairline-left($border-color: #ccc, $border-style: solid) {
  @include hairline($border-color, $border-style, "left");
}

@mixin hairline-x($border-color: #ccc, $border-style: solid) {
  @include hairline($border-color, $border-style, ("left", "right"));
}

@mixin hairline-y($border-color: #ccc, $border-style: solid) {
  @include hairline($border-color, $border-style, ("top", "bottom"));
}

@mixin hairline-0($no-radius: false) {
  // TODO 是否需要？
  //border-width: 0;

  @if $no-radius == true {
    border-radius: 0;
  }

  &::after {
    border-width: 0;

    @if $no-radius == true {
      border-radius: 0;
    }
  }
}

/**
 * 方案2，缩小后，指定四边的位置实现
 *
 * 优点：不受 overflow:hidden 影响
 * 缺点：最多支持两条边
 * @todo dpr 处理
 */

$sides: top, right, bottom, left;
$reverseSides: (top: bottom, right: left, bottom: top, left: right);
$xy: (top: Y, right: X, bottom: Y, left: X);

@mixin hairline2-pseudo($type: 'after', $border-side) {
  &::#{$type} {
    position: absolute;
    content: " ";
    pointer-events: none;
    transform: scale#{map-get($xy, $border-side)}(0.5);

    $reverseSide: map-get($reverseSides, $border-side);
    @each $side in $sides {
      @if ($side != $reverseSide) {
        // 相反方向不用设置位置
        #{$side}: 0;
      }
    }

    border-color: inherit;
    // NOTE: 小程序不能使用 border-style, 需明确指定 border-xxx-style，否则边框变粗
    border-#{$border-side}-style: inherit;
    border-#{$border-side}-width: 1PX;
  }
}

@mixin hairline2($border-color, $border-style, $border-side) {
  position: relative;
  border-width: 0 !important;
  border-color: $border-color;
  border-style: $border-style;

  @include hairline2-pseudo("after", $border-side);
}

@mixin hairline2-top($border-color: #ccc, $border-style: solid) {
  @include hairline2($border-color, $border-style, "top");
}

@mixin hairline2-right($border-color: #ccc, $border-style: solid) {
  @include hairline2($border-color, $border-style, "right");
}

@mixin hairline2-bottom($border-color: #ccc, $border-style: solid) {
  @include hairline2($border-color, $border-style, "bottom");
}

@mixin hairline2-left($border-color: #ccc, $border-style: solid) {
  @include hairline2($border-color, $border-style, "left");
}

@mixin hairline2-x($border-color: #ccc, $border-style: solid) {
  @include hairline2($border-color, $border-style, "right");
  @include hairline2-pseudo("before", "left");
}

@mixin hairline2-y($border-color: #ccc, $border-style: solid) {
  @include hairline2($border-color, $border-style, "bottom");
  @include hairline2-pseudo("before", "top");
}
